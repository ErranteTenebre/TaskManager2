// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.EntityFramework;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    [Migration("20240517232806_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Обычный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Низкий"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Средний"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Высокий"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.RefreshSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FingerPrint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshSessions");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WorkspaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StageId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4344),
                            CreatorId = 1,
                            Description = "Разработать схему базы данных в MS Visio",
                            PriorityId = 1,
                            StageId = 1,
                            Title = "Разработать схему базы данных",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4346),
                            CreatorId = 2,
                            Description = "Составить подробное техническое задание для нового проекта",
                            PriorityId = 2,
                            StageId = 1,
                            StartDate = new DateTime(2024, 5, 18, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4347),
                            Title = "Написать техническое задание",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4355),
                            CreatorId = 3,
                            Description = "Создать RESTful API для нового мобильного приложения",
                            PriorityId = 3,
                            StageId = 2,
                            StartDate = new DateTime(2024, 5, 19, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4355),
                            Title = "Разработать API",
                            WorkspaceId = "1c6e5e97-5e3b-56ya-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4357),
                            CreatorId = 4,
                            Description = "Настроить непрерывную интеграцию и доставку с использованием Jenkins",
                            PriorityId = 4,
                            StageId = 3,
                            StartDate = new DateTime(2024, 5, 20, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4357),
                            Title = "Настроить CI/CD",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4359),
                            CreatorId = 5,
                            Description = "Произвести оптимизацию запросов и структуры базы данных",
                            PriorityId = 1,
                            StageId = 1,
                            StartDate = new DateTime(2024, 5, 21, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4359),
                            Title = "Оптимизировать базу данных",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4361),
                            CreatorId = 1,
                            Description = "Проверить код новой фичи и дать обратную связь",
                            PriorityId = 2,
                            StageId = 3,
                            StartDate = new DateTime(2024, 5, 22, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4361),
                            Title = "Провести код-ревью",
                            WorkspaceId = "1c6e5e97-5e3b-56ya-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4363),
                            CreatorId = 2,
                            Description = "Создать макеты интерфейса в Figma для нового приложения",
                            PriorityId = 3,
                            StageId = 2,
                            StartDate = new DateTime(2024, 5, 23, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4363),
                            Title = "Разработать интерфейс пользователя",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4365),
                            CreatorId = 3,
                            Description = "Создать юнит-тесты для нового модуля",
                            PriorityId = 4,
                            StageId = 2,
                            StartDate = new DateTime(2024, 5, 24, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4365),
                            Title = "Написать юнит-тесты",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4367),
                            CreatorId = 4,
                            Description = "Подготовить и провести презентацию для заказчика",
                            PriorityId = 1,
                            StageId = 3,
                            StartDate = new DateTime(2024, 5, 25, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4368),
                            Title = "Провести презентацию проекта",
                            WorkspaceId = "1c6e5e97-5e3b-56ya-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 5, 17, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4369),
                            CreatorId = 5,
                            Description = "Обновить документацию по проекту на Confluence",
                            PriorityId = 2,
                            StageId = 2,
                            StartDate = new DateTime(2024, 5, 26, 23, 28, 6, 500, DateTimeKind.Utc).AddTicks(4369),
                            Title = "Обновить документацию",
                            WorkspaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskResponsible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TasksResponsibles");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskStageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TasksStages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Для выполнения"
                        },
                        new
                        {
                            Id = 2,
                            Name = "В процессе"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Выполнена"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mrm.aimdar@mail.ru",
                            Login = "Сунгатуллин Айдар",
                            Password = "111111"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mrm.aimdari2@mail.ru",
                            Login = "Несущий слово",
                            Password = "111111"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mrm.aimdar3@mail.ru",
                            Login = "Царь интернета",
                            Password = "111111"
                        },
                        new
                        {
                            Id = 4,
                            Email = "mrm.aimdar4@mail.ru",
                            Login = "Чилипов Семен",
                            Password = "111111"
                        },
                        new
                        {
                            Id = 5,
                            Email = "mrm.aimdar5@mail.ru",
                            Login = "Калугина Анна",
                            Password = "111111"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.Workspace", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440",
                            Title = "Мое рабочее пространство"
                        },
                        new
                        {
                            Id = "1c6e5e97-5e3b-43aa-b804-8d5eaf922411",
                            Title = "Команда мечты"
                        },
                        new
                        {
                            Id = "1c6e5e97-5e3b-56ya-b804-8d5eaf922411",
                            Title = "Неуставающие"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.WorkspaceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WorkspacesRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Участник"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Администратор"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.WorkspaceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkSpaceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkspacesUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 2,
                            UserId = 1,
                            WorkSpaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf972440"
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 1,
                            WorkSpaceId = "1c6e5e97-5e3b-43aa-b804-8d5eaf922411"
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 1,
                            WorkSpaceId = "1c6e5e97-5e3b-56ya-b804-8d5eaf922411"
                        });
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.RefreshSession", b =>
                {
                    b.HasOne("WebApplication1.Infrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskEntity", b =>
                {
                    b.HasOne("WebApplication1.Infrastructure.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("WebApplication1.Infrastructure.Entities.TaskStageEntity", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Stage");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskResponsible", b =>
                {
                    b.HasOne("WebApplication1.Infrastructure.Entities.TaskEntity", null)
                        .WithMany("TaskResponsibles")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.WorkspaceUser", b =>
                {
                    b.HasOne("WebApplication1.Infrastructure.Entities.WorkspaceRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Infrastructure.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("WebApplication1.Infrastructure.Entities.TaskEntity", b =>
                {
                    b.Navigation("TaskResponsibles");
                });
#pragma warning restore 612, 618
        }
    }
}
